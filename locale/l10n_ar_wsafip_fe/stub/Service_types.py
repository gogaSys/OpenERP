##################################################
# file: Service_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -b service.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://ar.gov.afip.dif.facturaelectronica/
##############################

class ns0:
    targetNamespace = "http://ar.gov.afip.dif.facturaelectronica/"

    class FEAuthRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FEAuthRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FEAuthRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Token"), aname="_Token", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Sign"), aname="_Sign", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"cuit"), aname="_cuit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Token = None
                    self._Sign = None
                    self._cuit = None
                    return
            Holder.__name__ = "FEAuthRequest_Holder"
            self.pyclass = Holder

    class FERecuperaQTYResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FERecuperaQTYResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FERecuperaQTYResponse_Def.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FERecuperaQTY",lazy=False)(pname=(ns,"qty"), aname="_qty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ar.gov.afip.dif.facturaelectronica/","vError",lazy=False)(pname=(ns,"RError"), aname="_RError", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._qty = None
                    self._RError = None
                    return
            Holder.__name__ = "FERecuperaQTYResponse_Holder"
            self.pyclass = Holder

    class FERecuperaQTY_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FERecuperaQTY")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FERecuperaQTY_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    return
            Holder.__name__ = "FERecuperaQTY_Holder"
            self.pyclass = Holder

    class vError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "vError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vError_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"percode"), aname="_percode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"perrmsg"), aname="_perrmsg", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._percode = None
                    self._perrmsg = None
                    return
            Holder.__name__ = "vError_Holder"
            self.pyclass = Holder

    class DummyResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "DummyResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DummyResponse_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"appserver"), aname="_appserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dbserver"), aname="_dbserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authserver"), aname="_authserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._appserver = None
                    self._dbserver = None
                    self._authserver = None
                    return
            Holder.__name__ = "DummyResponse_Holder"
            self.pyclass = Holder

    class FELastCMPtype_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FELastCMPtype")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FELastCMPtype_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"PtoVta"), aname="_PtoVta", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TipoCbte"), aname="_TipoCbte", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PtoVta = None
                    self._TipoCbte = None
                    return
            Holder.__name__ = "FELastCMPtype_Holder"
            self.pyclass = Holder

    class FERecuperaLastCMPResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FERecuperaLastCMPResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FERecuperaLastCMPResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"cbte_nro"), aname="_cbte_nro", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ar.gov.afip.dif.facturaelectronica/","vError",lazy=False)(pname=(ns,"RError"), aname="_RError", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cbte_nro = None
                    self._RError = None
                    return
            Holder.__name__ = "FERecuperaLastCMPResponse_Holder"
            self.pyclass = Holder

    class FEUltNroResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FEUltNroResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FEUltNroResponse_Def.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","UltNroResponse",lazy=False)(pname=(ns,"nro"), aname="_nro", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ar.gov.afip.dif.facturaelectronica/","vError",lazy=False)(pname=(ns,"RError"), aname="_RError", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._nro = None
                    self._RError = None
                    return
            Holder.__name__ = "FEUltNroResponse_Holder"
            self.pyclass = Holder

    class UltNroResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "UltNroResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.UltNroResponse_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    return
            Holder.__name__ = "UltNroResponse_Holder"
            self.pyclass = Holder

    class FERequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FERequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FERequest_Def.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FECabeceraRequest",lazy=False)(pname=(ns,"Fecr"), aname="_Fecr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ar.gov.afip.dif.facturaelectronica/","ArrayOfFEDetalleRequest",lazy=False)(pname=(ns,"Fedr"), aname="_Fedr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Fecr = None
                    self._Fedr = None
                    return
            Holder.__name__ = "FERequest_Holder"
            self.pyclass = Holder

    class FECabeceraRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FECabeceraRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FECabeceraRequest_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"cantidadreg"), aname="_cantidadreg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"presta_serv"), aname="_presta_serv", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._cantidadreg = None
                    self._presta_serv = None
                    return
            Holder.__name__ = "FECabeceraRequest_Holder"
            self.pyclass = Holder

    class ArrayOfFEDetalleRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "ArrayOfFEDetalleRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfFEDetalleRequest_Def.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FEDetalleRequest",lazy=False)(pname=(ns,"FEDetalleRequest"), aname="_FEDetalleRequest", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FEDetalleRequest = []
                    return
            Holder.__name__ = "ArrayOfFEDetalleRequest_Holder"
            self.pyclass = Holder

    class FEDetalleRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FEDetalleRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FEDetalleRequest_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"tipo_doc"), aname="_tipo_doc", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"nro_doc"), aname="_nro_doc", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"tipo_cbte"), aname="_tipo_cbte", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"punto_vta"), aname="_punto_vta", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"cbt_desde"), aname="_cbt_desde", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"cbt_hasta"), aname="_cbt_hasta", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"imp_total"), aname="_imp_total", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"imp_tot_conc"), aname="_imp_tot_conc", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"imp_neto"), aname="_imp_neto", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"impto_liq"), aname="_impto_liq", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"impto_liq_rni"), aname="_impto_liq_rni", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"imp_op_ex"), aname="_imp_op_ex", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fecha_cbte"), aname="_fecha_cbte", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fecha_serv_desde"), aname="_fecha_serv_desde", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fecha_serv_hasta"), aname="_fecha_serv_hasta", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fecha_venc_pago"), aname="_fecha_venc_pago", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tipo_doc = None
                    self._nro_doc = None
                    self._tipo_cbte = None
                    self._punto_vta = None
                    self._cbt_desde = None
                    self._cbt_hasta = None
                    self._imp_total = None
                    self._imp_tot_conc = None
                    self._imp_neto = None
                    self._impto_liq = None
                    self._impto_liq_rni = None
                    self._imp_op_ex = None
                    self._fecha_cbte = None
                    self._fecha_serv_desde = None
                    self._fecha_serv_hasta = None
                    self._fecha_venc_pago = None
                    return
            Holder.__name__ = "FEDetalleRequest_Holder"
            self.pyclass = Holder

    class FEResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FEResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FEResponse_Def.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FECabeceraResponse",lazy=False)(pname=(ns,"FecResp"), aname="_FecResp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ar.gov.afip.dif.facturaelectronica/","ArrayOfFEDetalleResponse",lazy=False)(pname=(ns,"FedResp"), aname="_FedResp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ar.gov.afip.dif.facturaelectronica/","vError",lazy=False)(pname=(ns,"RError"), aname="_RError", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FecResp = None
                    self._FedResp = None
                    self._RError = None
                    return
            Holder.__name__ = "FEResponse_Holder"
            self.pyclass = Holder

    class FECabeceraResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FECabeceraResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FECabeceraResponse_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"cuit"), aname="_cuit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fecha_cae"), aname="_fecha_cae", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"cantidadreg"), aname="_cantidadreg", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"resultado"), aname="_resultado", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"motivo"), aname="_motivo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reproceso"), aname="_reproceso", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"presta_serv"), aname="_presta_serv", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._cuit = None
                    self._fecha_cae = None
                    self._cantidadreg = None
                    self._resultado = None
                    self._motivo = None
                    self._reproceso = None
                    self._presta_serv = None
                    return
            Holder.__name__ = "FECabeceraResponse_Holder"
            self.pyclass = Holder

    class ArrayOfFEDetalleResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "ArrayOfFEDetalleResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfFEDetalleResponse_Def.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FEDetalleResponse",lazy=False)(pname=(ns,"FEDetalleResponse"), aname="_FEDetalleResponse", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FEDetalleResponse = []
                    return
            Holder.__name__ = "ArrayOfFEDetalleResponse_Holder"
            self.pyclass = Holder

    class FEDetalleResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FEDetalleResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FEDetalleResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"tipo_doc"), aname="_tipo_doc", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"nro_doc"), aname="_nro_doc", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"tipo_cbte"), aname="_tipo_cbte", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"punto_vta"), aname="_punto_vta", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"cbt_desde"), aname="_cbt_desde", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"cbt_hasta"), aname="_cbt_hasta", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"imp_total"), aname="_imp_total", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"imp_tot_conc"), aname="_imp_tot_conc", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"imp_neto"), aname="_imp_neto", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"impto_liq"), aname="_impto_liq", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"impto_liq_rni"), aname="_impto_liq_rni", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"imp_op_ex"), aname="_imp_op_ex", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"resultado"), aname="_resultado", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cae"), aname="_cae", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fecha_cbte"), aname="_fecha_cbte", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fecha_vto"), aname="_fecha_vto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"motivo"), aname="_motivo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fecha_serv_desde"), aname="_fecha_serv_desde", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fecha_serv_hasta"), aname="_fecha_serv_hasta", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fecha_venc_pago"), aname="_fecha_venc_pago", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tipo_doc = None
                    self._nro_doc = None
                    self._tipo_cbte = None
                    self._punto_vta = None
                    self._cbt_desde = None
                    self._cbt_hasta = None
                    self._imp_total = None
                    self._imp_tot_conc = None
                    self._imp_neto = None
                    self._impto_liq = None
                    self._impto_liq_rni = None
                    self._imp_op_ex = None
                    self._resultado = None
                    self._cae = None
                    self._fecha_cbte = None
                    self._fecha_vto = None
                    self._motivo = None
                    self._fecha_serv_desde = None
                    self._fecha_serv_hasta = None
                    self._fecha_venc_pago = None
                    return
            Holder.__name__ = "FEDetalleResponse_Holder"
            self.pyclass = Holder

    class FEConsultaCAEReq_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FEConsultaCAEReq")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FEConsultaCAEReq_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"cuit_emisor"), aname="_cuit_emisor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"tipo_cbte"), aname="_tipo_cbte", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"punto_vta"), aname="_punto_vta", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"cbt_nro"), aname="_cbt_nro", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"imp_total"), aname="_imp_total", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cae"), aname="_cae", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fecha_cbte"), aname="_fecha_cbte", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cuit_emisor = None
                    self._tipo_cbte = None
                    self._punto_vta = None
                    self._cbt_nro = None
                    self._imp_total = None
                    self._cae = None
                    self._fecha_cbte = None
                    return
            Holder.__name__ = "FEConsultaCAEReq_Holder"
            self.pyclass = Holder

    class FEConsultaCAEResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        type = (schema, "FEConsultaCAEResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FEConsultaCAEResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"Resultado"), aname="_Resultado", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ar.gov.afip.dif.facturaelectronica/","vError",lazy=False)(pname=(ns,"RError"), aname="_RError", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Resultado = None
                    self._RError = None
                    return
            Holder.__name__ = "FEConsultaCAEResponse_Holder"
            self.pyclass = Holder

    class FERecuperaQTYRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FERecuperaQTYRequest"
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        def __init__(self, **kw):
            ns = ns0.FERecuperaQTYRequest_Dec.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FEAuthRequest",lazy=False)(pname=(ns,"argAuth"), aname="_argAuth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://ar.gov.afip.dif.facturaelectronica/","FERecuperaQTYRequest")
            kw["aname"] = "_FERecuperaQTYRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._argAuth = None
                    return
            Holder.__name__ = "FERecuperaQTYRequest_Holder"
            self.pyclass = Holder

    class FERecuperaQTYRequestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FERecuperaQTYRequestResponse"
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        def __init__(self, **kw):
            ns = ns0.FERecuperaQTYRequestResponse_Dec.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FERecuperaQTYResponse",lazy=False)(pname=(ns,"FERecuperaQTYRequestResult"), aname="_FERecuperaQTYRequestResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://ar.gov.afip.dif.facturaelectronica/","FERecuperaQTYRequestResponse")
            kw["aname"] = "_FERecuperaQTYRequestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FERecuperaQTYRequestResult = None
                    return
            Holder.__name__ = "FERecuperaQTYRequestResponse_Holder"
            self.pyclass = Holder

    class FEDummy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FEDummy"
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        def __init__(self, **kw):
            ns = ns0.FEDummy_Dec.schema
            TClist = []
            kw["pname"] = ("http://ar.gov.afip.dif.facturaelectronica/","FEDummy")
            kw["aname"] = "_FEDummy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "FEDummy_Holder"
            self.pyclass = Holder

    class FEDummyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FEDummyResponse"
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        def __init__(self, **kw):
            ns = ns0.FEDummyResponse_Dec.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","DummyResponse",lazy=False)(pname=(ns,"FEDummyResult"), aname="_FEDummyResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://ar.gov.afip.dif.facturaelectronica/","FEDummyResponse")
            kw["aname"] = "_FEDummyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FEDummyResult = None
                    return
            Holder.__name__ = "FEDummyResponse_Holder"
            self.pyclass = Holder

    class FERecuperaLastCMPRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FERecuperaLastCMPRequest"
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        def __init__(self, **kw):
            ns = ns0.FERecuperaLastCMPRequest_Dec.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FEAuthRequest",lazy=False)(pname=(ns,"argAuth"), aname="_argAuth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ar.gov.afip.dif.facturaelectronica/","FELastCMPtype",lazy=False)(pname=(ns,"argTCMP"), aname="_argTCMP", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://ar.gov.afip.dif.facturaelectronica/","FERecuperaLastCMPRequest")
            kw["aname"] = "_FERecuperaLastCMPRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._argAuth = None
                    self._argTCMP = None
                    return
            Holder.__name__ = "FERecuperaLastCMPRequest_Holder"
            self.pyclass = Holder

    class FERecuperaLastCMPRequestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FERecuperaLastCMPRequestResponse"
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        def __init__(self, **kw):
            ns = ns0.FERecuperaLastCMPRequestResponse_Dec.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FERecuperaLastCMPResponse",lazy=False)(pname=(ns,"FERecuperaLastCMPRequestResult"), aname="_FERecuperaLastCMPRequestResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://ar.gov.afip.dif.facturaelectronica/","FERecuperaLastCMPRequestResponse")
            kw["aname"] = "_FERecuperaLastCMPRequestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FERecuperaLastCMPRequestResult = None
                    return
            Holder.__name__ = "FERecuperaLastCMPRequestResponse_Holder"
            self.pyclass = Holder

    class FEUltNroRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FEUltNroRequest"
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        def __init__(self, **kw):
            ns = ns0.FEUltNroRequest_Dec.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FEAuthRequest",lazy=False)(pname=(ns,"argAuth"), aname="_argAuth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://ar.gov.afip.dif.facturaelectronica/","FEUltNroRequest")
            kw["aname"] = "_FEUltNroRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._argAuth = None
                    return
            Holder.__name__ = "FEUltNroRequest_Holder"
            self.pyclass = Holder

    class FEUltNroRequestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FEUltNroRequestResponse"
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        def __init__(self, **kw):
            ns = ns0.FEUltNroRequestResponse_Dec.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FEUltNroResponse",lazy=False)(pname=(ns,"FEUltNroRequestResult"), aname="_FEUltNroRequestResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://ar.gov.afip.dif.facturaelectronica/","FEUltNroRequestResponse")
            kw["aname"] = "_FEUltNroRequestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FEUltNroRequestResult = None
                    return
            Holder.__name__ = "FEUltNroRequestResponse_Holder"
            self.pyclass = Holder

    class FEAutRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FEAutRequest"
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        def __init__(self, **kw):
            ns = ns0.FEAutRequest_Dec.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FEAuthRequest",lazy=False)(pname=(ns,"argAuth"), aname="_argAuth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ar.gov.afip.dif.facturaelectronica/","FERequest",lazy=False)(pname=(ns,"Fer"), aname="_Fer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://ar.gov.afip.dif.facturaelectronica/","FEAutRequest")
            kw["aname"] = "_FEAutRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._argAuth = None
                    self._Fer = None
                    return
            Holder.__name__ = "FEAutRequest_Holder"
            self.pyclass = Holder

    class FEAutRequestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FEAutRequestResponse"
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        def __init__(self, **kw):
            ns = ns0.FEAutRequestResponse_Dec.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FEResponse",lazy=False)(pname=(ns,"FEAutRequestResult"), aname="_FEAutRequestResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://ar.gov.afip.dif.facturaelectronica/","FEAutRequestResponse")
            kw["aname"] = "_FEAutRequestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FEAutRequestResult = None
                    return
            Holder.__name__ = "FEAutRequestResponse_Holder"
            self.pyclass = Holder

    class FEConsultaCAERequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FEConsultaCAERequest"
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        def __init__(self, **kw):
            ns = ns0.FEConsultaCAERequest_Dec.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FEAuthRequest",lazy=False)(pname=(ns,"argAuth"), aname="_argAuth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ar.gov.afip.dif.facturaelectronica/","FEConsultaCAEReq",lazy=False)(pname=(ns,"argCAERequest"), aname="_argCAERequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://ar.gov.afip.dif.facturaelectronica/","FEConsultaCAERequest")
            kw["aname"] = "_FEConsultaCAERequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._argAuth = None
                    self._argCAERequest = None
                    return
            Holder.__name__ = "FEConsultaCAERequest_Holder"
            self.pyclass = Holder

    class FEConsultaCAERequestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FEConsultaCAERequestResponse"
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        def __init__(self, **kw):
            ns = ns0.FEConsultaCAERequestResponse_Dec.schema
            TClist = [GTD("http://ar.gov.afip.dif.facturaelectronica/","FEConsultaCAEResponse",lazy=False)(pname=(ns,"FEConsultaCAERequestResult"), aname="_FEConsultaCAERequestResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://ar.gov.afip.dif.facturaelectronica/","FEConsultaCAERequestResponse")
            kw["aname"] = "_FEConsultaCAERequestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FEConsultaCAERequestResult = None
                    return
            Holder.__name__ = "FEConsultaCAERequestResponse_Holder"
            self.pyclass = Holder

    class DummyResponse_Dec(ElementDeclaration):
        literal = "DummyResponse"
        schema = "http://ar.gov.afip.dif.facturaelectronica/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://ar.gov.afip.dif.facturaelectronica/","DummyResponse")
            kw["aname"] = "_DummyResponse"
            if ns0.DummyResponse_Def not in ns0.DummyResponse_Dec.__bases__:
                bases = list(ns0.DummyResponse_Dec.__bases__)
                bases.insert(0, ns0.DummyResponse_Def)
                ns0.DummyResponse_Dec.__bases__ = tuple(bases)

            ns0.DummyResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "DummyResponse_Dec_Holder"

# end class ns0 (tns: http://ar.gov.afip.dif.facturaelectronica/)
