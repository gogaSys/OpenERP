#
# Este test crea una nueva compania utilizando el wizard de creación de companias.
#
# AVISO!!!! Cuidado al ejecutar este test!!! v6.0
#
# Testear los wizard de configuración no es trivial. El problema radica en que estos
# actualizan la lista de módulos e instalan otros. Al hacer eso reinician los módulos
# ejecutando nuevamente los test ya realizados, probocando un loop infinito. Para
# prevenir esto hay que tocar el código del servidor de la siguiente manera:
#
# Al archivo server/bin/addons/res/res_config.py , en la clase res_config_installer
#
#     def execute(self, cr, uid, ids, context=None):
#+      if hasattr(self, 'is_test'): return
#       modules = self.pool.get('ir.module.module')
#        
- !record {model: base.setup.company, id: com_wiz_rm }:
        company_id: com_rm
        name: Cristian S. Rocha 
        account_no: 57321
        city: Buenos Aires
        country_id: !ref {model: res.country, search: "[('name','=','Argentina')]"}
        currency: base.ARS
        email: cristian.rocha@moldeo.coop
        phone: (+54.11).4771.4164
        state_id: !ref {model: res.country, search: "[('name','=','Capital Federal')]"}
        street: Av. Rivadavia 9588
        street2: 16E
        website: moldeo.coop
        zip: 1407

- !python {model: base.setup.company }: |
    self.is_test = True
    self.view_init(cr, uid, [ref("com_wiz_rm")], {})
    self.execute(cr, uid, [ref("com_wiz_rm")], {})

- !python {model: res.company }: |
    company_ids = self.search(cr, uid, [('name','=','Cristian S. Rocha')])
    if (len(company_ids) != 1):
        raise AssertionError, 'Cant create company'

#
# Wizard que selecciona la contabilidad argentina
#
- !record {model: account.installer, id: acc_wiz_rm }:
        company_id: com_rm
        charts: l10n_ar_chart_generic

- !python {model: account.installer }: |
    self.is_test = True
    self.view_init(cr, uid, [ref("acc_wiz_rm")], {})
    self.execute(cr, uid, [ref("acc_wiz_rm")], {})

#
# Wizard que selecciona el plan contable
#
- !record {model: wizard.multi.charts.accounts, id: cha_wiz_rm }:
        chart_template_id: !ref {model: account.chart.template, search: "[('name','=','Plan Contable Genérico de Argentina para Monotributistas')]"}
        company_id: com_rm
        bank_accounts_id: []

- !python {model: wizard.multi.charts.accounts }: |
    self.is_test = True
    self.write(cr, uid, [ref("cha_wiz_rm")], {'sale_tax': False, 'purchase_tax': False})
    self.execute(cr, uid, [ref("cha_wiz_rm")], {})

#
# Wizard que crea los journals para un responsable inscripto
#
- !record {model: l10n_ar_invoice.config, id: inv_wiz_rm }:
        company_id: com_rm
        cuit: 23250954549
        do_export: False
        remove_old_journals: True
        purchase_by_class: False
        responsability_id: !ref {model: afip.responsability, search: "[('name','=','Responsable Monotributo')]"}
        sequence_by: type

- !python {model: l10n_ar_invoice.config }: |
    self.is_test = True
    #self.view_init(cr, uid, [ref("inv_wiz_rm")], {})
    data = self.read(cr, uid, ref("inv_wiz_rm"), ['company_id', 'responsability_id', 'do_export', 'remove_old_journals', 'sequence_by', 'point_of_sale', 'purchase_by_class'])
    del data['id']
    res = self.update_journals(cr, uid, None, **data)
    k = { 'journals_to_delete': [(5,)]+[ (0, 0, v) for v in res['value']['journals_to_delete'] ],
          'sequences_to_create': [(5,)]+[ (0, 0, v) for v in res['value']['sequences_to_create'] ],
          'journals_to_create': [(5,)]+[ (0, 0, v) for v in res['value']['journals_to_create'] ] }
    self.write(cr, uid, [ref("inv_wiz_rm")], k)
    self.execute(cr, uid, [ref("inv_wiz_rm")], {})

- !python {model: account.journal }: |
    journal_ids = self.search(cr, uid, [('company_id.name','=','Cristian S. Rocha')])
    if (len(journal_ids)!=9):
        print [ a.name for a in self.browse(cr, uid, journal_ids) ]
        raise AssertionError, 'Error in journals creation for Monotributo. Expected 9, exists %i.' % len(journal_ids)

#
# El responsable monotribustita esta listo para facturar !!!
#

