#
#       Create an invoice from Resp Inscr. to Resp Monotributo.
#
- Create a simple invoice type C
- !record {model: account.invoice, id: inv_rm2ri}:
    company_id: com_ivari
    journal_id: !ref {model: account.journal, search: "[('code','=','FVC0001'), ('company_id.name','=','Cristian S. Rocha')]"}
    period_id:  !ref {model: account.period, search: "[('company_id.name','=','Cristian S. Rocha')]"}
    account_id: !ref {model: account.account, search: "[('code','=','113010'), ('company_id.name','=','Cristian S. Rocha')]"}
    partner_id: !ref {model: res.partner, search: "[('name','=','Melanoma SA.')]"}
    address_contact_id: !ref {model: res.partner.address, search: "[('partner_id.name','=','Melanoma SA.')]"}
    address_invoice_id: !ref {model: res.partner.address, search: "[('partner_id.name','=','Melanoma SA.')]"}
    invoice_line:
      - account_id: !ref {model: account.account, search: "[('code','=','411000'), ('company_id.name','=','Cristian S. Rocha')]"}
        name: '[PC3] Medium PC'
        price_unit: 900.0
        quantity: 10.0
        product_id: product.product_product_pc3
        uos_id: product.product_uom_unit
        invoice_line_tax_id: []

- Compute amount
- !python {model: account.invoice}: |
    inv_id = [ref('inv_rm2ri')]
    self.view_init(cr, uid, inv_id, {})
    self.button_compute(cr, uid, inv_id)

- Check invoice state and values
- !assert {model: account.invoice, id: inv_rm2ri, string: Check invoice state and values}:
    - state == 'draft'
    - amount_untaxed == 9000.0
    - amount_tax == 0.0
    - amount_total == 9000.0

- Check invoice lines
- !assert {model: account.invoice.line, search: "[('invoice_id','=',ref('inv_rm2ri'))]", string: Check invoice lines}:
    - name == '[PC3] Medium PC'
    - price_unit_vat_included == 900.0
    - price_subtotal_vat_included == 9000.0
    - price_unit_not_vat_included == 900.0
    - price_subtotal_not_vat_included == 9000.0

- Validate invoice
- !python {model: account.invoice}: |
    inv_id = [ref('inv_rm2ri')]
    self.action_date_assign(cr, uid, inv_id)
    self.action_move_create(cr, uid, inv_id)
    self.action_number(cr, uid, inv_id)
    self.write(cr, uid, inv_id, {'state': 'open'})

- Check invoice state and values
- !assert {model: account.invoice, id: inv_rm2ri, string: Check invoice state and values}:
    - state == 'open'
    - amount_untaxed == 9000.0
    - amount_tax == 0.0
    - amount_total == 9000.0

- Print invoice
- !python {model: account.invoice}: |
    from openerp.tools.test_reports import try_report
    try_report(cr, uid, 'report.account.invoice', [ref('inv_rm2ri')])


